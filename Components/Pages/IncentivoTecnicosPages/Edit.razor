@page "/IncentivoTecnico/Edit/{IncentivoId:int}"
@inject IncentivosTecnicoServices incentivosTecnicoServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Modificar Incentivos de Técnicos</PageTitle>

<EditForm Model="tecnico" OnValidSubmit="Guardar" formname="editarIncentivoTecnicoForm">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header bg-primary text-white text-center py-2 rounded">
            <h3><i class="fas fa-clipboard-list"></i> Registro de Incentivos de Técnicos</h3>
        </div>
        <div class="card-body">
            <!-- IncentivoId -->
            <div class="form-group">
                <label for="IncentivoId">IncentivoId</label>
                <InputNumber id="IncentivoId" class="form-control" @bind-Value="tecnico.IncentivoId" />
                <ValidationMessage For="@(() => tecnico.IncentivoId)" />
            </div>

            <!-- Fecha -->
            <div class="form-group">
                <label for="Fecha">Fecha</label>
                <InputDate id="Fecha" class="form-control" @bind-Value="tecnico.Fecha" />
                <ValidationMessage For="@(() => tecnico.Fecha)" />
            </div>

            <!-- TecnicoId -->
            <div class="form-group">
                <label for="TecnicoId">TécnicoId</label>
                <InputNumber id="TecnicoId" class="form-control" @bind-Value="tecnico.TecnicoId" />
                <ValidationMessage For="@(() => tecnico.TecnicoId)" />
            </div>

            <!-- Descripcion -->
            <div class="form-group">
                <label for="Descripcion">Descripción</label>
                <InputText id="Descripcion" class="form-control" @bind-Value="tecnico.Descripcion" @oninput="(ChangeEventArgs e) => { tecnico.Descripcion = e.Value.ToString(); mostrarMensajeError = false; }" />
                @if (mostrarMensajeError)
                {
                    <div class="text-danger">El campo no está lleno.</div>
                }
                <ValidationMessage For="@(() => tecnico.Descripcion)" />
            </div>

            <!-- CantidadServicios -->
            <div class="form-group">
                <label for="CantidadServicios">Cantidad de Servicios</label>
                <InputNumber id="CantidadServicios" class="form-control" @bind-Value="tecnico.CantidadServicios" />
                <ValidationMessage For="@(() => tecnico.CantidadServicios)" />
            </div>

            <!-- Monto -->
            <div class="form-group">
                <label for="Monto">Monto</label>
                <InputNumber id="Monto" class="form-control" @bind-Value="tecnico.Monto" />
                <ValidationMessage For="@(() => tecnico.Monto)" />
            </div>

            <!-- Guardar -->
            <div class="text-center">
                <button type="submit" class="btn btn-outline-success ml-2">
                    <span class="bi bi-check-circle-fill"></span> Guardar
                </button>

                <!-- Retroceder -->
                <NavLink href="/Incentivostecnicos/index" class="btn btn-outline-danger mx-2">
                    <span class="bi bi-arrow-bar-left"></span> Retroceder
                </NavLink>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int IncentivoId { get; set; }
    public IncentivosTecnicos tecnico { get; set; } = new IncentivosTecnicos();
    private bool mostrarMensajeError = false;
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        if (IncentivoId != 0)
        {
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        Existe = false;
        var tipoEncontrado = await incentivosTecnicoServices.Buscar(IncentivoId);

        if (tipoEncontrado != null)
        {
            tecnico = tipoEncontrado;
        }
        else
        {
            Nuevo();
        }
    }

    private async Task Guardar()
    {
        try
        {
            if (!await Validar())
            {
                mostrarMensajeError = true;
                return;
            }

            var guardo = await incentivosTecnicoServices.Guardar(tecnico);
            if (guardo)
            {
                Nuevo(); // Aquí se llama al método Nuevo para limpiar los campos después de guardar
                navigationManager.NavigateTo("/Incentivos/index");
            }
            else
            {
                mostrarMensajeError = true;
            }
        }
        catch (Exception ex)
        {
            mostrarMensajeError = true;
            Console.WriteLine($"Ocurrió un error: {ex.Message}");
        }
    }

    private void Nuevo()
    {
        // Aquí se establecen los campos en su estado inicial o se crea una nueva instancia del modelo
        tecnico = new IncentivosTecnicos();
    }

    public async Task<bool> Validar()
    {
        var listaTipos = await incentivosTecnicoServices.Listar(t => t.Descripcion.ToLower() == tecnico.Descripcion.ToLower() && t.IncentivoId != tecnico.IncentivoId);
        Existe = listaTipos.Any();
        return !Existe;
    }
}
